enum PartnerStatus {
  default
  verified
  featured
}

enum PartnerRole {
  owner
  member
}

model Partner {
  id                String        @id @default(cuid())
  name              String
  email             String?       @unique
  image             String?
  bio               String?       @db.LongText
  description       String?       @db.LongText
  country           String?
  status            PartnerStatus @default(default)
  stripeConnectId   String?       @unique
  payoutsEnabled    Boolean       @default(false)
  showOnLeaderboard Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  programs     ProgramEnrollment[]
  applications ProgramApplication[]
  users        PartnerUser[]
  invites      PartnerInvite[]
  payouts      Payout[]
  commissions  Commission[]
  // webPresence  PartnerWebPresence?
}

model PartnerUser {
  id        String      @id @default(cuid())
  role      PartnerRole @default(member)
  userId    String
  partnerId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([userId, partnerId])
  @@index([partnerId])
}

model PartnerInvite {
  email     String
  expires   DateTime
  partnerId String
  role      PartnerRole @default(member)
  createdAt DateTime    @default(now())

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([email, partnerId])
  @@index([partnerId])
}

// model PartnerWebPresence {
//   id              String   @id @default(cuid())
//   partnerId       String   @unique
  
//   website            String?
//   websiteTxtRecord   String?
//   websiteVerified    Boolean  @default(false)
  
//   instagram         String?
//   instagramVerified Boolean @default(false)
  
//   tiktok          String?
//   tiktokVerified  Boolean  @default(false)
  
//   youtube         String?
//   youtubeVerified Boolean  @default(false)
  
//   twitter         String?
//   twitterVerified Boolean  @default(false)
  
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
  
//   partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
// }
