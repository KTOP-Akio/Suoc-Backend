model Token {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model RestrictedToken {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  scopes     String? // space separated (Eg: "links:write", "domains:read")
  expires    DateTime?
  lastUsed   DateTime?
  rateLimit  Int       @default(600) // rate limit per minute
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  projectId  String
  clientId   String? // if the token is generated by an OAuth client

  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  oAuthApp      OAuthApp?           @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  refreshTokens OAuthRefreshToken[]

  @@unique([userId, projectId, clientId])
  @@index([userId])
  @@index([projectId])
  @@index([clientId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
